// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/cpartogi/warteg/schema/request"
	response "github.com/cpartogi/warteg/schema/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

func (_m *Usecase) WartegAdd(ctx context.Context, addw request.Warteg) (wt response.WartegAdd, err error) {
	ret := _m.Called(ctx)

	var r0 response.WartegAdd
	if rf, ok := ret.Get(0).(func(context.Context, request.Warteg) response.WartegAdd); ok {
		r0 = rf(ctx, addw)
	} else {
		r0 = ret.Get(0).(response.WartegAdd)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) WartegDelete(ctx context.Context, warteg_id string) (wt response.WartegDelete, err error) {
	ret := _m.Called(ctx)

	var r0 response.WartegDelete
	if rf, ok := ret.Get(0).(func(context.Context, string) response.WartegDelete); ok {
		r0 = rf(ctx, warteg_id)
	} else {
		r0 = ret.Get(0).(response.WartegDelete)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) WartegUpdate(ctx context.Context, warteg_id string, uwt request.WartegUpdate) (wt response.WartegUpdate, err error) {
	ret := _m.Called(ctx)

	var r0 response.WartegUpdate
	if rf, ok := ret.Get(0).(func(context.Context, string, request.WartegUpdate) response.WartegUpdate); ok {
		r0 = rf(ctx, warteg_id, uwt)
	} else {
		r0 = ret.Get(0).(response.WartegUpdate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) WartegList(ctx context.Context, warteg_name string) (wl []response.WartegList, err error) {
	ret := _m.Called(ctx)

	var r0 []response.WartegList
	if rf, ok := ret.Get(0).(func(context.Context, string) []response.WartegList); ok {
		r0 = rf(ctx, warteg_name)
	} else {
		r0 = ret.Get(0).([]response.WartegList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) WartegDetail(ctx context.Context, warteg_id string) (wd response.WartegDetail, err error) {
	ret := _m.Called(ctx)

	var r0 response.WartegDetail
	if rf, ok := ret.Get(0).(func(context.Context, string) response.WartegDetail); ok {
		r0 = rf(ctx, warteg_id)
	} else {
		r0 = ret.Get(0).(response.WartegDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
